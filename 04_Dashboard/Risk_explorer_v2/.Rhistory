SPI3_Sep_2021_2050_RCP85 <- hazard_prep("SPI_delta_2021_2050_RCP85.tif", "H_03_SPI3_Sep_2021_2050_RCP85.tif", "H_SPI3_Sep_2021_2050_RCP85")
SPI3_Sep_2071_2100_RCP85 <- hazard_prep("SPI_delta_2071_2100_RCP85.tif", "H_04_SPI3_Sep_2071_2100_RCP85.tif", "H_SPI3_Sep_2071_2100_RCP85")
# Visualization
hazard_viz <- function (output_haz_prep, title){
y <- raster(output_haz_prep) %>%
gplot() +
geom_tile(aes(fill=value), alpha=0.8)+
scale_fill_gradient2(low = '#4cbb17', mid = '#f0e130', high = '#b7410e', midpoint=128) +
coord_equal()+
ggtitle(title)
ggplotly(y, tooltip= "value")
}
SPI_2021_2050_RCP45_rast <- hazard_viz(SPI3_Sep_2021_2050_RCP45, "SPI delta 2021-2050 RCP 4.5")
SPI_2071_2100_RCP45_rast <- hazard_viz(SPI3_Sep_2071_2100_RCP45, "SPI delta 2071-2100 RCP 4.5")
SPI_2021_2050_RCP85_rast <- hazard_viz(SPI3_Sep_2021_2050_RCP85, "SPI delta 2021-2050 RCP 8.5")
SPI_2071_2100_RCP85_rast <- hazard_viz(SPI3_Sep_2071_2100_RCP85, "SPI delta 2071-2100 RCP 8.5")
haz_path <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\03_Hazard\\"
haz_stack <- list.files(path = haz_path, pattern='.tif', all.files=TRUE, full.names = TRUE) %>%
rast()
#hazard <- terra::mask(haz_stack, mask_2)
plot(haz_stack)
#hazard[is.na(hazard)] <- 255
writeRaster(haz_stack,"R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\03_Hazard\\Stacks\\Hazard_stack.tif", overwrite = TRUE)
Feldst_rast <- raster(Feldst)
prim <- gplot(Feldst_rast) + geom_tile(aes(fill=value), alpha=0.8) + coord_equal()+ scale_fill_gradient2(low = '#4cbb17', mid = '#f0e130', high ='#b7410e' , midpoint=128)+ggtitle("Share of agriculutral land per cell")
ggplotly(prim, tooltip= "value")
PrimaryShare_rast <- raster(PrimaryShare)
prim <- gplot(PrimaryShare_rast) + geom_tile(aes(fill=value), alpha=0.8) + coord_equal()+ scale_fill_gradient2(low = '#4cbb17', mid = '#f0e130', high ='#b7410e' , midpoint=128)+ggtitle("Residents per industry: Primary")
ggplotly(prim, tooltip= "value")
Gastro_rast <- raster(Gastro)
Gastro_v <- vect("R:\\02_PROJECTS\\01_P_330001\\79_RESPECT\\03_Work\\WP2\\Data\\Raster_STATAT\\Arbeitsstaetten_nach_Wirtschaftsabschnitt.shp") %>%
project(crs_all)
Gastro <- rasterize(Gastro_v, Mask, "OENACE_I") * -1
# Variables metadata stored in "R:\02_PROJECTS\01_P_330001\79_RESPECT\03_Work\WP2\Data\Raster_STATAT\20180412_zgis_1kmdatenMetadaten.xslx"
# OENACE_I is "Beherbergung und Gastronomie"
#BeherbergungGastro_rast<-terra::rasterize(BeherbergungGastro_reproj,Mask,"OENACE_I")
Gastro <- mask(Gastro, Mask)
Gastro <- stretch(Gastro, minv=0, maxv=254, smin=minmax(Gastro)[1,], smax=minmax(Gastro)[2,])
Gastro[is.na(Gastro)] <- 255
# Visualization
Gastro_rast <- raster(Gastro)
prim <- gplot(Gastro_rast) + geom_tile(aes(fill=value), alpha=0.8) + coord_equal()+ scale_fill_gradient2(low = '#4cbb17', mid = '#f0e130', high ='#b7410e' , midpoint=128)+ggtitle("Accomodation and gastronomy")
ggplotly(prim, tooltip= "value")
# Load libraries
library(terra)
library(ENMTools) # for correlation plot
library(raster)
library(knitr)
library(kableExtra)
library(corrplot)
library(ggplot2)
library(ggdist)
library(rasterVis)
library(plotly)
library(geodiv) #for kurtosis
library(dplyr)
library(magrittr)
crs_all<-"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
Agri_mask <- vect("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\Drought_data_Salzburg\\Bodenfunktionsbewertung_Shapefile\\Bodenfunktionsbewertung\\Bodenfunktionsbewertung.shp") %>%
project(crs_all)
Agri_mask$yes <- 20
Mask <- rast("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\Mask_Salzburg_1km\\Mask_Salzburg_1km.tif") %>%
aggregate(fact = 10, fun = mean)
Agri_rast<-rasterize(Agri_mask, Mask, field ="yes", touches=TRUE)
plot(Agri_rast)
Agri_rast <- cover(Agri_rast, Mask)
Agri_rast[is.na(Agri_rast)] <- 255
Agri_rast[(Agri_rast == -1)] <- 255
# Visualization
Agri_rast_p <- raster(Agri_rast)
prim <- gplot(Agri_rast_p) + geom_tile(aes(fill=value), alpha=0.8) + coord_equal()+ scale_fill_gradient2(low = '#4cbb17', mid = '#f0e130', high ='#b7410e' , midpoint=128)+ggtitle("Agricultural area")
ggplotly(prim, tooltip= "value")
#--------------
# Export
export <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\Mask_Salzburg_1km\\"
agri <- file.path(export,"Agri.tif")
terra::writeRaster(Agri_rast, agri, names = "Agri_mask", overwrite = TRUE)
vul_path <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\01_Vulnerability\\V\\"
vul_stack <- list.files(path = vul_path , pattern='.tif', all.files=TRUE, full.names = TRUE) %>%
rast()
#mask_0 <- rast("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\Mask_Salzburg_1km\\Mask_SBG_only_1km.tif")
#agri_mask <- rast("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\Mask_Salzburg_1km\\Agri.tif")
# We want mask to have the same projection and extent as vul_stack and forest_mask (they already match)
mask_1 <- project(Mask, vul_stack) %>%
crop(vul_stack)
# We remove everything from forest_mask which is not also in mask and then add 255 to NA area, so that the whole picture has either 255 or 0 as a value
# We mask everything from the forest_mask which is not contained in the mask (Germany and other areas outside of Salzburg). Outside Salzburg is NA, inside is 0 and forested areas are 255. We want also inside Salzburg to be NA.
mask_2 <- terra::mask(Agri_rast, mask_1)
mask_2[mask_2==255] <- NA
vul_path <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\01_Vulnerability\\V\\"
vul_stack <- list.files(path = vul_path , pattern='.tif', all.files=TRUE, full.names = TRUE) %>%
rast()
vulnerability <- terra::mask(vul_stack, mask_2)
plot(vul_stack)
vulnerability[is.na(vulnerability)] <- 255
writeRaster(vul_stack,"R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\01_Vulnerability\\Stacks\\Vulnerability_stack.tif", overwrite = TRUE)
exp_path <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\02_Exposure\\"
exp_stack <- list.files(path = exp_path, pattern='.tif', all.files=TRUE, full.names = TRUE) %>%
rast()
exposure <- terra::mask(exp_stack, mask_2)
#plot(exposure)
exposure[is.na(exposure)] <- 255
plot(exp_stack)
writeRaster(exp_stack,"R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\02_Exposure\\Stacks\\Exposure_stack.tif", overwrite = TRUE)
haz_path <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\03_Hazard\\"
haz_stack <- list.files(path = haz_path, pattern='.tif', all.files=TRUE, full.names = TRUE) %>%
rast()
hazard <- terra::mask(haz_stack, mask_2)
plot(haz_stack)
hazard[is.na(hazard)] <- 255
writeRaster(haz_stack,"R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\03_Hazard\\Stacks\\Hazard_stack.tif", overwrite = TRUE)
# Plot rasters interactive
# Style the plot
austria<-gplot(subset_agriculture) + facet_wrap(~variable) +
geom_tile(aes(fill=value)) + coord_equal()
vul_path <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\01_Vulnerability\\V\\"
vul_stack <- list.files(path = vul_path , pattern='.tif', all.files=TRUE, full.names = TRUE) %>%
rast()
vulnerability <- terra::mask(vul_stack, mask_2)
plot(vul_stack)
vulnerability[is.na(vulnerability)] <- 255
writeRaster(vulnerability,"R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\01_Vulnerability\\Stacks\\Vulnerability_stack.tif", overwrite = TRUE)
exp_path <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\02_Exposure\\"
exp_stack <- list.files(path = exp_path, pattern='.tif', all.files=TRUE, full.names = TRUE) %>%
rast()
exposure <- terra::mask(exp_stack, mask_2)
#plot(exposure)
exposure[is.na(exposure)] <- 255
plot(exp_stack)
writeRaster(exposure,"R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\02_Exposure\\Stacks\\Exposure_stack.tif", overwrite = TRUE)
haz_path <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\03_Hazard\\"
haz_stack <- list.files(path = haz_path, pattern='.tif', all.files=TRUE, full.names = TRUE) %>%
rast()
hazard <- terra::mask(haz_stack, mask_2)
plot(haz_stack)
hazard[is.na(hazard)] <- 255
writeRaster(hazard,"R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\03_Hazard\\Stacks\\Hazard_stack.tif", overwrite = TRUE)
# Plot rasters interactive
# Style the plot
austria<-gplot(vulnerability) + facet_wrap(~variable) +
geom_tile(aes(fill=value)) + coord_equal()
#Plot the plot
ggplotly(austria)
plot(exposure)
exp_path <- "R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\02_Exposure\\"
exp_stack <- list.files(path = exp_path, pattern='.tif', all.files=TRUE, full.names = TRUE) %>%
rast()
exposure <- terra::mask(exp_stack, mask_2)
#plot(exposure)
exposure[is.na(exposure)] <- 255
plot(exposure)
writeRaster(exposure,"R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\02_Exposure\\Stacks\\Exposure_stack.tif", overwrite = TRUE)
writeRaster(exposure,"R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\02_Data\\00_Final_data\\02_Exposure\\Stacks\\Exposure_stack.tif", overwrite = TRUE)
plot(hazard)
library(shiny); runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2/Risk_explorer_v2.R')
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
risk_data = sf::st_read("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\04_Geonization\\results\\RiskExport\\Drought.v3.shp")
risk = sf::st_transform(risk_data, 4326)
risk <- smooth(risk, "densify")
risk <- smoothr::smooth(risk, "densify")
plot(risk)
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
shiny::runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
hover_labels <- function(title, value){
sprintf(paste0("<strong>",title,"</strong><br/>%.1f%%"), risk$Risk_Index) %>% lapply(htmltools::HTML)
}
labels1 = hover_labels("Risk Index", risk$Risk_Index)
hover_labels <- function(title, value){
sprintf(paste0("<strong>",title,"</strong><br/>%.1f%%"), risk$Risk_Index) %>% lapply(htmltools::HTML)
}
labels1 = hover_labels("Risk Index", risk$Risk_Index)
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
runApp()
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
n_risk = sf::st_read("data/Risk_H1_45.shp")
runApp('R:/02_PROJECTS/01_P_330001/127_UNCHAIN/03__Work/WP4/03_Casestudy/R_Scripts/Risk_explorer_v2')
setwd("R:\02_PROJECTS\01_P_330001\127_UNCHAIN\03__Work\WP4\03_Casestudy\R_Scripts\Risk_explorer_v2")
setwd("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\R_Scripts\\Risk_explorer_v2")
runApp()
n_risk = sf::st_read("data/Risk_H1_45.shp")
risk = sf::st_read("data/Risk_H1_45.shp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
risk = sf::st_read("data/Risk_H1_45.shp")
risk = sf::st_transform(risk, 4326)
runApp('Risk_explorer_v2.R')
runApp('Risk_explorer_v2.R')
runApp()
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(terra)
library(ENMTools) # for correlation plot
library(raster)
library(knitr)
library(kableExtra)
library(corrplot)
library(ggplot2)
library(ggdist)
library(rasterVis)
library(plotly)
library(geodiv) #for
library(sf)
library(reshape2)
library(smoothr)
library(basemapR)
# Load libraries
library(terra)
library(ENMTools) # for correlation plot
library(raster)
library(knitr)
library(kableExtra)
library(corrplot)
library(ggplot2)
library(ggdist)
library(rasterVis)
library(plotly)
library(geodiv) #for
library(sf)
library(reshape2)
library(smoothr)
library(basemapR)
geons <- st_read("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\04_Geonization\\results\\RiskExport\\Drought.v3.shp")
geons <- smooth(geons, "densify")
runApp()
runApp()
runApp()
runApp()
vul <- sf::st_read("data/Vulnerability_smooth.shp")
vul <- sf::st_read("data/Vulnerability_smooth.shp")
vul <- sf::st_transform(vul, 4326)
mytheme <- theme(panel.grid.major = element_line(color = '#cccccc'
,linetype = 'dashed'
,size = .3
)
,panel.background = element_rect(fill = 'aliceblue')
,plot.title = element_text(size = 32)
,plot.subtitle = element_text(size = 14)
,axis.title = element_blank()
,axis.text = element_text(size = 10)
)
base_plot <- ggplot() +
geom_sf(data = vul, fill = vul$vulnerabil, size = .4) +
mytheme
mid <- mean(vul$vulnerabil)
ggplot(vul) +
geom_sf(aes(fill = vulnerabil, color="#A4A4A4")) +
mytheme +
scale_fill_gradient2(midpoint=mid, low="blue", mid="#ffc100",
high="#f43f1a", space ="Lab" )
mytheme <- theme(panel.grid.major = element_line(color = '#cccccc'
,linetype = 'dashed'
,size = .3
)
,panel.background = element_rect(fill = 'aliceblue')
,plot.title = element_text(size = 32)
,plot.subtitle = element_text(size = 14)
,axis.title = element_blank()
,axis.text = element_text(size = 10)
)
base_plot <- ggplot() +
geom_sf(data = vul, fill = vul$vulnerabil, size = .4) +
mytheme
mid <- mean(vul$vulnerabil)
ggplot(vul) +
geom_sf(aes(fill = Vul_Index, color="#A4A4A4")) +
mytheme +
scale_fill_gradient2(midpoint=mid, low="blue", mid="#ffc100",
high="#f43f1a", space ="Lab" )
mytheme <- theme(panel.grid.major = element_line(color = '#cccccc'
,linetype = 'dashed'
,size = .3
)
,panel.background = element_rect(fill = 'aliceblue')
,plot.title = element_text(size = 32)
,plot.subtitle = element_text(size = 14)
,axis.title = element_blank()
,axis.text = element_text(size = 10)
)
base_plot <- ggplot() +
geom_sf(data = vul, fill = vul$vulnerabil, size = .4) +
mytheme
mid <- mean(vul$vulnerabil)
ggplot(vul) +
geom_sf(aes(fill = Vul_index, color="#A4A4A4")) +
mytheme +
scale_fill_gradient2(midpoint=mid, low="blue", mid="#ffc100",
high="#f43f1a", space ="Lab" )
runApp()
id_current <- paste0("input$","riskmap","_shape_click$id")
id_current
print(id_current)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
vulnerability = sf::st_read("data/Vulnerability_smooth.shp") %>%
sf::st_transform(4326)
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
#Loading necessary libraries
library(rgdal)
library(raster)
library(maptools)
library(devtools)
library(summarytools)
library(ggplot2)
library(sp)
library(factoextra)
library(fpc)
library(NbClust)
library(glue)
library(dplyr)
library(ggplot2)
library(reshape2)
#Loading the spatial dataset (Shapefile) holding the data which is to be analyzed
vul_dat <- sf::st_read("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\04_Geonization\\results\\VulnerabilityExport\\Vulnerability_smooth.shp")
#Making a dataframe from the spatial datset
vul_df<-data.frame(vul_dat)
#Creating Scree Plots (or "Elbow" plots) to see the decrease of total sum of squares with each added cluster
#Creating a Scree plot object
nch<-fviz_nbclust(vul_df, hcut, method = "wss") +
#Defining where to draw the dashed line
geom_vline(xintercept = 3, linetype = 2)
#Plotting the Scree plots
pnch<-ggpubr::ggpar(nch,submain="(for AGNES clustering)")
#Arranging the plots in a grid
plot(pnch)
#Creating Scree Plots (or "Elbow" plots) to see the decrease of total sum of squares with each added cluster
#Creating a Scree plot object
nch<-fviz_nbclust(vul_df, hcut, method = "wss") +
#Defining where to draw the dashed line
geom_vline(xintercept = 4, linetype = 2)
#Plotting the Scree plots
pnch<-ggpubr::ggpar(nch,submain="(for AGNES clustering)")
#Arranging the plots in a grid
plot(pnch)
cluster <- function(k, metric, main){
x <- eclust(vul_df, "agnes", k = k, graph = FALSE,hc_metric=metric)
fviz_cluster(x, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),main=main,font.main=15)
}
distCorAS3 <- cluster(3,"spearman", "Distribution AGNES with Spearmans rho")
CorAK3 <- eclust(vul_df, "agnes", k = 3, graph = FALSE,hc_metric="kendall")
#Loading necessary libraries
library(rgdal)
library(raster)
library(maptools)
library(devtools)
library(summarytools)
library(ggplot2)
library(sp)
library(factoextra)
library(fpc)
library(NbClust)
library(glue)
library(dplyr)
library(ggplot2)
library(reshape2)
#Loading the spatial dataset (Shapefile) holding the data which is to be analyzed
vul_dat <- sf::st_read("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\04_Geonization\\results\\VulnerabilityExport\\Vulnerability_smooth.shp")
#Making a dataframe from the spatial datset
vul_df<-data.frame(vul_dat[1:12])
CorAK3 <- eclust(vul_df, "agnes", k = 3, graph = FALSE,hc_metric="kendall")
cluster <- function(k, metric, main){
y <- eclust(vul_df, "agnes", k = k, graph = FALSE,hc_metric=metric)
fviz_cluster(y, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),main=main,font.main=15)
}
distCorAS3 <- cluster(3,"spearman", "Distribution AGNES with Spearmans rho")
View(vul_df)
cluster <- function(k, metric, main){
y <- eclust(vul_df[1], "agnes", k = k, graph = FALSE,hc_metric=metric)
fviz_cluster(y, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),main=main,font.main=15)
}
distCorAS3 <- cluster(3,"spearman", "Distribution AGNES with Spearmans rho")
View(vul_df)
library(rgdal)
library(raster)
library(maptools)
library(devtools)
library(summarytools)
library(ggplot2)
library(sp)
library(factoextra)
library(fpc)
library(NbClust)
library(glue)
library(dplyr)
library(ggplot2)
library(reshape2)
library(ggpubr)
#Loading the spatial dataset (Shapefile) holding the data which is to be analyzed
vul_dat <- readOGR("R:\\02_PROJECTS\\01_P_330001\\127_UNCHAIN\\03__Work\\WP4\\03_Casestudy\\04_Geonization\\results\\VulnerabilityExport\\Vulnerability_smooth.shp")
#Making a dataframe from the spatial datset
vul_df<-data.frame(vul_dat[1:12])
cluster <- function(k, metric, main){
y <- eclust(vul_df, "agnes", k = k, graph = FALSE,hc_metric=metric)
fviz_cluster(y, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),main=main,font.main=15)
}
distCorAS3 <- cluster(3,"spearman", "Distribution AGNES with Spearmans rho")
#The following code produces Scatter Plots for the different methods and combinations tried
#K-means with Euclidean Distance
#kmean <- eclust(GEONS_df_scale, "kmeans", k = 4, nstart = 42, graph = FALSE,hc_metric="euclidean")
#distKmean<-fviz_cluster(kmean, geom = "point", ellipse.type = "norm",
#             palette = "jco", ggtheme = theme_minimal(),main="Distribution k-means",font.main=15)
#AGNES with Spearman 3 clusters
cluster_ag <- function(k, metric, main){
x <- eclust(vul_df, "agnes", k = k, graph = FALSE,hc_metric=metric)
fviz_cluster(x, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),main=main,font.main=15)
}
AS3 <- cluster(3,"spearman", "AGNES & Spearmans rho")
AK3 <- cluster(3, "kendall", "AGNES & Kendalls tau")
AS4 <- cluster(4, "spearman", "AGNES & Spearmans rho")
AK4 <- cluster(4, "kendall", "AGNES & Kendalls tau")
cluster_di <- function(k, metric, main){
x <- eclust(vul_df, "diana", k = k, graph = FALSE,hc_metric=metric)
fviz_cluster(x, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),main=main,font.main=15)
}
DS3 <- cluster(3,"spearman", "DIANA & Spearmans rho")
DK3 <- cluster(3, "kendall", "DIANA & Kendalls tau")
DS4 <- cluster(4, "spearman", "DIANA & Spearmans rho")
DK4 <- cluster(4, "kendall", "DIANA & Kendalls tau")
#Arranging the plots
gridExtra::grid.arrange(AS3, DS3, AK3 ,DK3, AS4, DS4,AK4, DK4, DS3, nrow = 5)
sil <- function(clus){
fviz_silhouette(clus,print.summary = 	FALSE)
}
DS3 <- sil(DS3)
#The following code produces Scatter Plots for the different methods and combinations tried
#AGNES
cluster_ag <- function(k, metric, main){
eclust(vul_df, "agnes", k = k, graph = FALSE,hc_metric=metric)
}
AS3 <- cluster(3,"spearman")
#The following code produces Scatter Plots for the different methods and combinations tried
#AGNES
cluster_ag <- function(k, metric){
eclust(vul_df, "agnes", k = k, graph = FALSE,hc_metric=metric)
}
AS3 <- cluster(3,"spearman")
#The following code produces Scatter Plots for the different methods and combinations tried
#AGNES
cluster_ag <- function(k, metric){
eclust(vul_df, "agnes", k = k, graph = FALSE,hc_metric=metric)
}
AS3 <- cluster(3,"spearman")
#The following code produces Scatter Plots for the different methods and combinations tried
#AGNES
cluster_ag <- function(k, metric){
eclust(vul_df, "agnes", k = k, graph = FALSE,hc_metric=metric)
}
AS3 <- cluster(3,"spearman")
#AGNES
cluster_ag <- function(k, metric){
eclust(vul_df, "agnes", k = k, graph = FALSE,hc_metric=metric)
}
AS3 <- cluster(3,"spearman")
#The following code produces Scatter Plots for the different methods and combinations tried
#AGNES
cluster_ag <- function(k, metric){
eclust(vul_df, "agnes", k = k, graph = TRUE,hc_metric=metric)
}
AS3 <- cluster_ag(3,"spearman")
AK3 <- cluster_ag(3, "kendall")
AS4 <- cluster_ag(4, "spearman")
AK4 <- cluster_ag(4, "kendall")
#DIANA
cluster_di <- function(k, metric){
x <- eclust(vul_df, "diana", k = k, graph = FALSE,hc_metric=metric)
}
DS3 <- cluster_di(3,"spearman")
DK3 <- cluster_di(3, "kendall")
DS4 <- cluster_di(4, "spearman")
DK4 <- cluster_di(4, "kendall")
#Arranging the plots
#gridExtra::grid.arrange(AS3, DS3, AK3 ,DK3, AS4, DS4,AK4, DK4, nrow = 5)
sil <- function(clus){
fviz_silhouette(clus,print.summary = 	FALSE)
}
DS3 <- sil(DS3)
DK3 <- sil(DK3)
DS4 <- sil(DS4)
DK4 <- sil(DK4)
AS3 <- sil(AS3)
AK3 <- sil(AK3)
AS4 <- sil(AS4)
AK4 <- sil(AK4)
sil_plot <- function(clus){
ggpubr::ggpar(clus,main="DIANA with Spearman Rho (3 cluster)",xlab=FALSE,legend.title = "Cluster No.",font.main=20, font.x=15, font.y=15,font.subtitle=15,font.legend=15,font.caption=15,tickslab=FALSE)
}
p1 <- sil_plot(DS3)
#Arraging the plots in a grid
gridExtra::grid.arrange(p1)
